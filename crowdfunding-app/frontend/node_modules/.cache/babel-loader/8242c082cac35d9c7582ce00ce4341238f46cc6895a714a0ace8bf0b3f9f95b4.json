{"ast":null,"code":"// Import required packages\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst path = require('path');\nconst dotenv = require('dotenv');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\n\n// Load environment variables\ndotenv.config();\n\n// Initialize Express app\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// Serve static files from the 'public' directory\napp.use(express.static(path.join(__dirname, 'public')));\n\n// MongoDB connection\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/rotaract_crowdfunding';\nmongoose.connect(MONGODB_URI).then(() => console.log('Connected to MongoDB')).catch(err => {\n  console.error('MongoDB connection error:', err);\n  process.exit(1);\n});\n\n// Define MongoDB schemas\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\nconst donationSchema = new mongoose.Schema({\n  user: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  },\n  name: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true\n  },\n  amount: {\n    type: Number,\n    required: true\n  },\n  message: String,\n  status: {\n    type: String,\n    enum: ['pending', 'completed', 'failed'],\n    default: 'pending'\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\n// Create models\nconst User = mongoose.model('User', userSchema);\nconst Donation = mongoose.model('Donation', donationSchema);\n\n// Authentication middleware\nconst auth = async (req, res, next) => {\n  try {\n    var _req$header;\n    const token = (_req$header = req.header('Authorization')) === null || _req$header === void 0 ? void 0 : _req$header.replace('Bearer ', '');\n    if (!token) {\n      return res.status(401).json({\n        message: 'Authentication required'\n      });\n    }\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');\n    const user = await User.findById(decoded.userId);\n    if (!user) {\n      return res.status(401).json({\n        message: 'Authentication failed'\n      });\n    }\n    req.user = user;\n    next();\n  } catch (error) {\n    res.status(401).json({\n      message: 'Authentication failed'\n    });\n  }\n};\n\n// API Routes\n\n// User registration\napp.post('/api/auth/register', async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      password\n    } = req.body;\n\n    // Check if user already exists\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) {\n      return res.status(400).json({\n        message: 'User already exists'\n      });\n    }\n\n    // Hash password\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    // Create new user\n    const user = new User({\n      name,\n      email,\n      password: hashedPassword\n    });\n    await user.save();\n\n    // Generate JWT token\n    const token = jwt.sign({\n      userId: user._id\n    }, process.env.JWT_SECRET || 'your_jwt_secret', {\n      expiresIn: '7d'\n    });\n    res.status(201).json({\n      token,\n      user: {\n        id: user._id,\n        name: user.name,\n        email: user.email\n      }\n    });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// User login\napp.post('/api/auth/login', async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n\n    // Check if user exists\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(400).json({\n        message: 'Invalid credentials'\n      });\n    }\n\n    // Validate password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        message: 'Invalid credentials'\n      });\n    }\n\n    // Generate JWT token\n    const token = jwt.sign({\n      userId: user._id\n    }, process.env.JWT_SECRET || 'your_jwt_secret', {\n      expiresIn: '7d'\n    });\n    res.json({\n      token,\n      user: {\n        id: user._id,\n        name: user.name,\n        email: user.email\n      }\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// Get user profile\napp.get('/api/auth/profile', auth, async (req, res) => {\n  try {\n    const user = await User.findById(req.user._id).select('-password');\n    res.json(user);\n  } catch (error) {\n    console.error('Profile error:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// Create donation\napp.post('/api/donations', async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      amount,\n      message,\n      userId\n    } = req.body;\n\n    // Create new donation\n    const donation = new Donation({\n      user: userId || null,\n      name,\n      email,\n      amount,\n      message\n    });\n    await donation.save();\n    res.status(201).json({\n      success: true,\n      donation: {\n        id: donation._id,\n        amount: donation.amount,\n        status: donation.status,\n        createdAt: donation.createdAt\n      }\n    });\n  } catch (error) {\n    console.error('Donation error:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// Get all donations (admin only)\napp.get('/api/donations', auth, async (req, res) => {\n  try {\n    // In a real app, you would check if the user is an admin\n    const donations = await Donation.find().sort({\n      createdAt: -1\n    });\n    res.json(donations);\n  } catch (error) {\n    console.error('Get donations error:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// Get donation statistics\napp.get('/api/donations/stats', async (req, res) => {\n  try {\n    const totalDonations = await Donation.countDocuments({\n      status: 'completed'\n    });\n    const totalAmount = await Donation.aggregate([{\n      $match: {\n        status: 'completed'\n      }\n    }, {\n      $group: {\n        _id: null,\n        total: {\n          $sum: '$amount'\n        }\n      }\n    }]);\n    const recentDonations = await Donation.find({\n      status: 'completed'\n    }).sort({\n      createdAt: -1\n    }).limit(5).select('name amount message createdAt');\n    res.json({\n      totalDonations,\n      totalAmount: totalAmount.length > 0 ? totalAmount[0].total : 0,\n      recentDonations\n    });\n  } catch (error) {\n    console.error('Stats error:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// Serve the main HTML file for all routes (for SPA)\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\n// Start server\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', err => {\n  console.error('Unhandled Promise Rejection:', err);\n  // Close server & exit process\n  // server.close(() => process.exit(1));\n});","map":{"version":3,"names":["express","require","mongoose","cors","path","dotenv","bcrypt","jwt","config","app","use","json","urlencoded","extended","static","join","__dirname","MONGODB_URI","process","env","connect","then","console","log","catch","err","error","exit","userSchema","Schema","name","type","String","required","email","unique","password","createdAt","Date","default","now","donationSchema","user","Types","ObjectId","ref","amount","Number","message","status","enum","User","model","Donation","auth","req","res","next","_req$header","token","header","replace","decoded","verify","JWT_SECRET","findById","userId","post","body","existingUser","findOne","salt","genSalt","hashedPassword","hash","save","sign","_id","expiresIn","id","isMatch","compare","get","select","donation","success","donations","find","sort","totalDonations","countDocuments","totalAmount","aggregate","$match","$group","total","$sum","recentDonations","limit","length","sendFile","PORT","listen","on"],"sources":["C:/Users/Hello/Documents/crowdfunding-app/frontend/src/index.js"],"sourcesContent":["// Import required packages\r\nconst express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst cors = require('cors');\r\nconst path = require('path');\r\nconst dotenv = require('dotenv');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\n// Initialize Express app\r\nconst app = express();\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Serve static files from the 'public' directory\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// MongoDB connection\r\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/rotaract_crowdfunding';\r\nmongoose.connect(MONGODB_URI)\r\n  .then(() => console.log('Connected to MongoDB'))\r\n  .catch(err => {\r\n    console.error('MongoDB connection error:', err);\r\n    process.exit(1);\r\n  });\r\n\r\n// Define MongoDB schemas\r\nconst userSchema = new mongoose.Schema({\r\n  name: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n  createdAt: { type: Date, default: Date.now }\r\n});\r\n\r\nconst donationSchema = new mongoose.Schema({\r\n  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\r\n  name: { type: String, required: true },\r\n  email: { type: String, required: true },\r\n  amount: { type: Number, required: true },\r\n  message: String,\r\n  status: {\r\n    type: String,\r\n    enum: ['pending', 'completed', 'failed'],\r\n    default: 'pending'\r\n  },\r\n  createdAt: { type: Date, default: Date.now }\r\n});\r\n\r\n// Create models\r\nconst User = mongoose.model('User', userSchema);\r\nconst Donation = mongoose.model('Donation', donationSchema);\r\n\r\n// Authentication middleware\r\nconst auth = async (req, res, next) => {\r\n  try {\r\n    const token = req.header('Authorization')?.replace('Bearer ', '');\r\n    if (!token) {\r\n      return res.status(401).json({ message: 'Authentication required' });\r\n    }\r\n\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');\r\n    const user = await User.findById(decoded.userId);\r\n\r\n    if (!user) {\r\n      return res.status(401).json({ message: 'Authentication failed' });\r\n    }\r\n\r\n    req.user = user;\r\n    next();\r\n  } catch (error) {\r\n    res.status(401).json({ message: 'Authentication failed' });\r\n  }\r\n};\r\n\r\n// API Routes\r\n\r\n// User registration\r\napp.post('/api/auth/register', async (req, res) => {\r\n  try {\r\n    const { name, email, password } = req.body;\r\n\r\n    // Check if user already exists\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: 'User already exists' });\r\n    }\r\n\r\n    // Hash password\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n    // Create new user\r\n    const user = new User({\r\n      name,\r\n      email,\r\n      password: hashedPassword\r\n    });\r\n\r\n    await user.save();\r\n\r\n    // Generate JWT token\r\n    const token = jwt.sign(\r\n      { userId: user._id },\r\n      process.env.JWT_SECRET || 'your_jwt_secret',\r\n      { expiresIn: '7d' }\r\n    );\r\n\r\n    res.status(201).json({\r\n      token,\r\n      user: {\r\n        id: user._id,\r\n        name: user.name,\r\n        email: user.email\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// User login\r\napp.post('/api/auth/login', async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    // Check if user exists\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Validate password\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Generate JWT token\r\n    const token = jwt.sign(\r\n      { userId: user._id },\r\n      process.env.JWT_SECRET || 'your_jwt_secret',\r\n      { expiresIn: '7d' }\r\n    );\r\n\r\n    res.json({\r\n      token,\r\n      user: {\r\n        id: user._id,\r\n        name: user.name,\r\n        email: user.email\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// Get user profile\r\napp.get('/api/auth/profile', auth, async (req, res) => {\r\n  try {\r\n    const user = await User.findById(req.user._id).select('-password');\r\n    res.json(user);\r\n  } catch (error) {\r\n    console.error('Profile error:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// Create donation\r\napp.post('/api/donations', async (req, res) => {\r\n  try {\r\n    const { name, email, amount, message, userId } = req.body;\r\n\r\n    // Create new donation\r\n    const donation = new Donation({\r\n      user: userId || null,\r\n      name,\r\n      email,\r\n      amount,\r\n      message\r\n    });\r\n\r\n    await donation.save();\r\n\r\n    res.status(201).json({\r\n      success: true,\r\n      donation: {\r\n        id: donation._id,\r\n        amount: donation.amount,\r\n        status: donation.status,\r\n        createdAt: donation.createdAt\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Donation error:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// Get all donations (admin only)\r\napp.get('/api/donations', auth, async (req, res) => {\r\n  try {\r\n    // In a real app, you would check if the user is an admin\r\n    const donations = await Donation.find().sort({ createdAt: -1 });\r\n    res.json(donations);\r\n  } catch (error) {\r\n    console.error('Get donations error:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// Get donation statistics\r\napp.get('/api/donations/stats', async (req, res) => {\r\n  try {\r\n    const totalDonations = await Donation.countDocuments({ status: 'completed' });\r\n    const totalAmount = await Donation.aggregate([\r\n      { $match: { status: 'completed' } },\r\n      { $group: { _id: null, total: { $sum: '$amount' } } }\r\n    ]);\r\n\r\n    const recentDonations = await Donation.find({ status: 'completed' })\r\n      .sort({ createdAt: -1 })\r\n      .limit(5)\r\n      .select('name amount message createdAt');\r\n\r\n    res.json({\r\n      totalDonations,\r\n      totalAmount: totalAmount.length > 0 ? totalAmount[0].total : 0,\r\n      recentDonations\r\n    });\r\n  } catch (error) {\r\n    console.error('Stats error:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// Serve the main HTML file for all routes (for SPA)\r\napp.get('*', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\r\n});\r\n\r\n// Start server\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server running on port ${PORT}`);\r\n});\r\n\r\n// Handle unhandled promise rejections\r\nprocess.on('unhandledRejection', (err) => {\r\n  console.error('Unhandled Promise Rejection:', err);\r\n  // Close server & exit process\r\n  // server.close(() => process.exit(1));\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}